#!/bin/bash
echo "Manager Update codename: Tracing the bulk"
export PrimaryParam=${1}
export SecondaryParam=${2}
export TertiaryParam=${3}
export quadtiaryParam=${4}
#set -x
#echo DEBUG PARAM CHECK ${PrimaryParam} ${SecondaryParam}

export PATH="${PATH}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Windows/System32/OpenSSH/:/mnt/c/ProgramData/chocolatey/bin:/mnt/c/Program Files/AMD/AMDuProf/bin:/mnt/c/Program Files/Intel/WiFi/bin/:/mnt/c/Program Files/Common Files/Intel/WirelessCommon/:/mnt/c/tools/php74:/mnt/c/ProgramData/ComposerSetup/bin:/mnt/c/Program Files/Git/cmd:/mnt/c/Program Files/OpenJDK/jdk-13.0.2/bin"
#proot Seccomp Acceleration SEGFAULT CRASHES FIX
#export PROOT_NO_SECCOMP=1
export newInstall=0




export initDir="$(pwd)"


red(){
printf '\e[38;5;210m' > /dev/tty
}

yellow(){
printf '\e[38;5;221m' > /dev/tty
}
green(){
printf '\e[38;5;042m' > /dev/tty
}
blue(){
printf '\e[38;5;039m' > /dev/tty
}

gray(){
printf '\e[38;5;037m' > /dev/tty
}

export red='\e[38;5;210m'
export yellow='\e[38;5;221m'
export green='\e[38;5;042m'
export blue='\e[38;5;039m'
export gray='\e[38;5;037m'


export pbadge="[Unified Container Manager]:"


intro(){

if [ ${newInstall} == '1' ] && [ ! -z ${newInstall} ]; then
  clear
blue
echo "==================================================================="
green
echo "😊 Warm welcome from questandachievement7Developer 😊"
echo "🎆✨ Welcome to unifiedContainer Project✨🎆"
echo "👉 Heavily Inspired by docker, multipass, termuxarch sdrausty, and neoOli bootstrap 👍"
echo "👉 Code sourced from MFDGaming NeoOli and Stackoverflow 👍"
blue
echo "==================================================================="

sleep 4
fi
}

paramCheck(){
#echo DEBUG PARAM CHECK ${PrimaryParam} ${SecondaryParam}
if [ -z ${PrimaryParam} ]; then
  red
  echo "${pbadge} 🤔 Invalid Sub command please refer help for manual 🤷"
  help_unifyServer
  exit
fi

if [ -z ${SecondaryParam} ]; then
  red
  echo "${pbadge} 🤔 no parameter detected please refer help for manual 🤷"
  help_unifyServer
  exit
fi

if [ ${SecondaryParam} == "default" ]; then
  clear
  red
  echo "${pbadge} Welco.. wait thats illegal! "
  exit
fi

}


confirmation(){
  randcode=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
  randcode="iwilltaketheresponsibilityofmyaction"
  yellow
  echo "${pbadge} ⚠️ Are you sure that you want to do this ?⚠️"
  echo "${pbadge} if you do please type this token"
  echo "${randcode}"
  echo "Your input: "
  read input
  echo "debug ${input}"
  if [ $input == $randcode ] ; then
    yellow
    echo "${pbadge} 🚀 Initiating dangerous code"
  else
    red
    echo "${pbadge} ❌ WRONG CODE CANCELLING ❌"
  exit
fi
}

nuke(){
  if [ -z ${removalretry}]; then
confirmation
fi
red
APIcall systemUI_notifysend "💣_Your_instlalation_is_being_nuked_💣"
echo "${pbadge} 💣 Nuking the installation 💣"
${userspacebackend} ${symlinkfix} rm -rf ${maindir}
if [ -d "${maindir}" ]; then
  red
  echo "${pbadge} ❌ Container Nuking failure Retrying! ❌"
  export removalretry=1
  nuke
fi
green
echo "${pbadge} ✔️  Nuking complete ✔️ "
exit
}

launchcontainerSvcFG(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  if [ ! -f svcID ]; then
  green
  echo "⏳ Launching container ${SecondaryParam}"
  bash start-bootstrap.sh bash /init
else
  red
  echo "${pbadge} ❌ Container currently is running if you believe that the container is not running ❌"
  echo "${0} stop ${SecondaryParam}"
fi
  exit
}

launchcontainerSvc(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  green
  echo "⏳ Launching container ${SecondaryParam}"
  bash start-bootstrap.sh bash /init > "${logs}/containers_${SecondaryParam}.log" 2>&1 &
  echo $! > svcID
  cat "${logs}/containers_${SecondaryParam}.log"
  APIcall systemUI_notifysend "Container_${SecondaryParam}_Successfully_Launched"
  exit
}

launchcontainerKill(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  yellow
  echo "${pbadge} 🛑 Stopping Container"
  kill -9 $(cat ${containersLair}/${SecondaryParam}/svcID)
  green
  APIcall systemUI_notifysend "Container_${SecondaryParam}_Successfully_Stopped"
  echo "${pbadge} ✔️ Container Stopped"
  exit
}

launchcontainerSHELL(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  echo Launching container ${SecondaryParam}
  green
  echo "${pbadge} 🌟 Have fun 🌟"
  #bash start-bootstrap.sh screenfetch
  bash start-bootstrap.sh "fish --login"
  exit
}

executeContainerCMD(){
  if [ ! -z $@ ] ; then
    SecondaryParam=${1}
    TertiaryParam=${2}
  fi
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  yellow
  echo "${pbadge} 🏃‍ Executing ${TertiaryParam} on ${SecondaryParam}"
  bash start-bootstrap.sh "${TertiaryParam}"
  if [ -z $@ ] ; then
  exit
fi
}

containerManagerImport(){
  if [ ! -z $@ ] ; then
    SecondaryParam=${1}
    TertiaryParam=${2}
  fi
APIcall systemUI_notifysend "⌛Importing_container⌛"
containerID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
export importedcontainer="${TMPFolder}/${containerID}"
git clone ${SecondaryParam} ${TMPFolder}/${containerID}
if [ ! -d "${TMPFolder}/${containerID}" ]; then
  red
  echo "${pbadge} ❌ Imported Container does not exists ❌"
  exit
fi
export GITSOURCE="${SecondaryParam}"
name=$(cat ${importedcontainer}/name)
packages=$(cat ${importedcontainer}/packages)
init=$(cat ${importedcontainer}/init)
setuproutines=$(cat ${importedcontainer}/setup)
rootfsConfig=${importedcontainer}/additional_container_configuration
cd ${origindir}
if [ -z ${updateContainer} ]; then
containerManagerAdd ${name}
fi
echo "${packages}" > ${containersLair}/${name}/rootfs/packages
export totalpackage=0
for b in ${packages}; do
totalpackage=$((totalpackage + 1))
done
currentpackage=0
for a in ${packages}; do
currentpackage=$((currentpackage + 1))
percentage=$((currentpackage * 100 / totalpackage))
#bash ${0} exec ${name} "apt install -y < /packages"
yellow
export SecondaryParamOld="${SecondaryParam}"
echo "${pbadge} ⌛ Installing Dependencies ${percentage} %"
bash ${0} exec ${name} "pacman -Syy" >> ${logs}/unifyServerPackageInstaller.log 2>&1
bash ${0} exec ${name} "pacman -S --needed --noconfirm ${a}" >> ${logs}/unifyServerPackageInstaller.log 2>&1
#Efficient code seems to not working? I dont know why?
#executeContainerCMD ${name} "pacman -Syy" >> ${logs}/unifyServerPackageInstaller.log 2>&1
#executeContainerCMD ${name} "pacman -S --needed --noconfirm ${a}" >> ${logs}/unifyServerPackageInstaller.log 2>&1
#executeContainerCMD ${name} "pacman -S --needed --noconfirm ${a}"
green
echo "${pbadge} ✔️ Done Installing ${a} "
done
echo "${GITSOURCE}" > ${containersLair}/${name}/origin
echo "${init}" > ${containersLair}/${name}/rootfs/init
echo "${setuproutines}" > ${containersLair}/${name}/rootfs/setup
echo "${pbadge} ✨Container Finishing touch✨"
echo "${pbadge} Checking rootfs cache"
if [ -d ${rootfsConfig} ]; then
  ${userspacebackend} ${symlinkfix} cp -ruaH ${rootfsConfig}/* ${containersLair}/${name}/rootfs
fi
#executeContainerCMD ${name} "bash /setup"
echo "${GITSOURCE}" > ${containersLair}/${name}/origin
bash ${0} exec ${name} "bash /setup"
green
APIcall systemUI_notifysend "✨Container_${SecondaryParam}_Successfully_Installed✨"
echo "${GITSOURCE}" > ${containersLair}/${name}/origin
echo "${pbadge} ✨import done✨"
exit
}

containerManagerExport(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
name=${SecondaryParam}
#bash ${0} exec ${SecondaryParam} "apt list --installed > /packages" #https://askubuntu.com/questions/9135/how-to-backup-settings-and-list-of-installed-packages
#bash ${0} exec ${SecondaryParam} "pacman -Qqe > /packages"
executeContainerCMD ${name} "pacman -Qqe > /packages"
packages=$(cat ${containersLair}/${SecondaryParam}/rootfs/packages)
init=$(cat ${containersLair}/${SecondaryParam}/rootfs/init)
executeContainerCMD ${name} "fish -c history" > ${containerExport}/${name}/setup
mkdir ${containerExport}/${name}
echo "${name}" > ${containerExport}/${name}/name
echo "${packages}" > ${containerExport}/${name}/packages
echo "${init}" > ${containerExport}/${name}/init
#echo "apt-get update; apt-get upgrade; echo Default setup done" > ${containerExport}/${name}/setup
#echo "pacman -Syu --noconfirm ; echo Default setup done" > ${containerExport}/${name}/setup
green
echo "${pbadge} ✨export done✨"
exit
}


containerManagerAdd(){
  if [ ! -z $@ ] ; then
    SecondaryParam=${1}
    TertiaryParam=${2}
  fi
  if [ -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} Container Exists"
    exit
  else
    yellow
    echo "${pbadge} 📦 Creating Container"
  if [ ! -d ${unasignedContainer} ] || [ ! -f ${unasignedContainer}/cacheSuccess ]; then
    if [ -f ${containersLair}/defaultSeq ] && [ -f ${containersLair}/guranteedSeqIntegrity ]; then
    echo "Optimization Enabled"
      mkdir ${containersLair}/${SecondaryParam}
      ${userspacebackend} ${symlinkfix} tar -C "${containersLair}/${SecondaryParam}" -xf "${containersLair}/defaultSeq" >> ${logs}/rootfsOptimizedCopyOperation.log 2>&1
      #mv ${containersLair}/${SecondaryParam}/default/* ${containersLair}/${SecondaryParam} #this is unused since the tar compressed directly from the directory
      #rm -rf ${containersLair}/${SecondaryParam}/default
  else
    echo "Optimization Disabled"
      ${userspacebackend} ${symlinkfix} cp -ruaH "${defaultContainer}" "${containersLair}/${SecondaryParam}" >> ${logs}/rootfsCopyOperation.log 2>&1
  fi
else
echo "${pbadge} Super Optimization Available"
mv -v ${unasignedContainer} ${containersLair}/${SecondaryParam} >> ${logs}/containerAheadOptimizationCacheMove.log 2>&1
containerAheadOptimizationCache > ${logs}/containerAheadOptimizationCache.log 2>&1 & #This will trigger the creation of additional unasigned container
#echo $! > ${maindir}/containerOptimizationPID
fi
    echo "$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)" > ${containersLair}/${SecondaryParam}/containerID
    echo "${pbadge} 📦 Creating Presistent data"
    mkdir "${presistentStorage}/$(cat ${containersLair}/${SecondaryParam}/containerID)"
    green
    APIcall systemUI_notifysend "✔️_Container_${SecondaryParam}_Successfully_Created"
    echo "${pbadge} ${SecondaryParam} ✔️ Container done"
    echo "${SecondaryParam}" >> ${containerFilesList}
    if [ -z $@ ] ; then
      exit
    fi
  fi

}

containerManagerReset(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
    confirmation
    yellow
    echo "${pbadge} 📦 Resetting Container"
    if [ -f "${containersLair}/${SecondaryParam}/origin" ]; then
      echo "${pbadge} 📦 Resetting Remote Container"
      originLink="$(cat ${containersLair}/${SecondaryParam}/origin)"
      echo "${originLink}"
      cd ${origindir}
      ${userspacebackend} ${symlinkfix} rm -rf "${containersLair}/${SecondaryParam}"
      bash ${0} import "${originLink}"
    else
      echo "${pbadge} 📦 Resetting Local Container"
    ${userspacebackend} ${symlinkfix} rm -rf "${containersLair}/${SecondaryParam}"
    ${userspacebackend} ${symlinkfix} cp -ruaH "${defaultContainer}" "${containersLair}/${SecondaryParam}" >> ${logs}/rootfsCopyOperation.log  2>&1
  fi
    green
    echo "${pbadge} ${SecondaryParam} ✔️ Container done"
    exit
  fi

}


containerManagerrm(){
  if [ -z ${removalretry} ]; then
  confirmation
fi
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
    yellow
    echo "${pbadge} 🗑️ Removing Container ${SecondaryParam}"
    if [ -f ${maindir}/NOPTRACE ]; then
      umount -lf ${containersLair}/${SecondaryParam}/rootfs/dev ${containersLair}/${SecondaryParam}/rootfs/sys ${containersLair}/${SecondaryParam}/rootfs/InstallCache ${containersLair}/${SecondaryParam}/rootfs/proc ${containersLair}/${SecondaryParam}/rootfs/exposed >> ${logs}/chrootmountbindRemoval 2>&1
    fi
    ${userspacebackend} ${symlinkfix} rm -rf "${containersLair}/${SecondaryParam}"
    if [ -d "${containersLair}/${SecondaryParam}" ]; then
      red
      echo "${pbadge} ❌ Container Removal failed retrying ❌"
      export removalretry=1
      containerManagerrm
    fi
    green
    APIcall systemUI_notifysend "✔️_Container_${SecondaryParam}_Removal_Successfull"
    echo "${pbadge} ✔️ Removing Finished"
    sed "s/${SecondaryParam}//" ${containerFilesList} > "${containersFilesList}_tmp"
    rm -rf ${containersFilesList}
    mv ${containersFilesList}_tmp ${containerFilesList}
    exit
  fi

}

editroutinesContainer(){
if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
else
    nano ${containersLair}/${SecondaryParam}/rootfs/init
    exit
fi
}

containerManagerLogs(){
if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
else
    less "${logs}/containers_${SecondaryParam}.log"
fi
}

installBin(){
echo ${PATH}
echo "${pbadge}stub"
#if [ ]
bayd="${maindir}/bay"
cat > "$bayd" <<- EOM
## This is a execution Routines that changes how the container behaves
## you can start a script or anything you want in here
export binloc="../${maindir}/unifyServer"
bash ${binloc} \$@
EOM
}

daemonCreate(){
echo "${pbadge}stub"
bayd="${maindir}/bayd"
cat > "$bayd" <<- EOM
## This is a execution Routines that changes how the container behaves
## you can start a script or anything you want in here
export binloc="../${maindir}/unifyServer"
cd ${maindir}
for a in \$(cat ${containerFilesList}); do
  bash ${binloc} launch ${a}
done
EOM
}




sysFileExchangeExport(){
if [ -z ${quadtiaryParam}] || [ -z ${TertiaryParam} ]; then
    red
    echo "${pbadge} ❌ You forgot to put source or destination ❌"
    exit
fi
if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
else
${userspacebackend} ${symlinkfix} cp -ruavH "${TertiaryParam}" "${containersLair}/${SecondaryParam}/rootfs/${quadtiaryParam}"
exit
fi
}

sysFileExchangeImport(){
if [ -z ${quadtiaryParam}] || [ -z ${TertiaryParam} ]; then
    red
    echo "${pbadge} ❌ You forgot to put source or destination ❌"
    exit
fi
if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
else
${userspacebackend} ${symlinkfix} cp -ruavH "${quadtiaryParam}" "${containersLair}/${SecondaryParam}/rootfs/${quadtiaryParam}"
exit
fi
}


debugFunct(){
sleep 4
clear
echo "================================================================="
red
echo " Do it at your own risk! You are on your own"
echo " Please refer to the code when calling a function "
echo "${pbadge} DEBUG MODE !"
echo
green
console(){
printf "\n unifyManager dbg console > "
read a
${a}
console
}
console
}



help_unifyServer(){
yellow
echo "${pbadge} Here are the commands"
echo "To launch container"
echo "${0} launch <containerName>"
echo "To Launch container in foreground"
echo "${0} launchfg <containerName>"
echo .
echo "To Stop container"
echo "${0} stop <containerName>"
echo .
echo "To Read Container Log"
echo "${0} logs <containerName>"
echo .
echo "To Grant local storage for the container"
echo "${0} exposeStorage <containerName>"
echo .
echo "To isolate local storage from the container"
echo "${0} deexposeStorage <containerName>"
echo .
echo "Export Container Configuration "
echo "${0} exportCont <containerName>"
echo .
echo "reset container to default configuration"
echo "${0} reset <containerName>"
echo .
echo "List all the container and its status"
echo "${0} list All"
echo .
echo "reset Everything"
echo "DO THIS ONLY WHEN YOU HAVE A PROBLEM LIKE CORRUPTED INSTALLATION"
echo "${0} nuke yes"
echo .
echo "refresh main container"
echo "refresh main container to upgrade new bootloader version or fix unpredicter errors"
echo "${0} refresh yes"
echo .
echo "install program"
echo "This allows the unifiedContainer Technology to be installed and called easily "
echo "When program is installed it can be called \$bay param param"
echo "${0} install yes"
echo .
echo "to enter the container Shell"
echo "${0} shell <containerName>"
echo .
echo "to import container from the git server "
echo "${0} import <git repo link>"
echo .
echo "to update the container that imported from the git server"
echo "${0} update <containerName>"
echo .
echo "to export File or directory from host "
echo "${0} exportFile <containerName> <Source dir or File container> <Target dir on Host>"
echo .
echo "upgrade Container to newer version"
echo "${0} upgrade <containerName>"
echo .
echo "To execute a command on a container"
echo "${0} exec <containerName> <command>"
echo .
echo "To add container"
echo "${0} add <containerName>"
echo .
echo "To remove Container"
echo "${0} remove <containerName>"
echo .
echo "To edit exec Routines container"
echo "${0} edit_routines <containerName>"
exit
}

paramintrepreter(){
case ${PrimaryParam} in
  debug)
    debugFunct ;;
  importFile)
    sysFileExchangeImport ;;
  exportFile)
    sysFileExchangeExport ;;
  launch)
    launchcontainerSvc ;;
  install)
    linkManagerPath ;;
  refresh)
    upgradeMainContainer ;;
  logs)
    containerManagerLogs ;;
  launchfg)
    launchcontainerSvcFG ;;
  import)
    containerManagerImport ;;
  exportCont)
    containerManagerExport ;;
  exposeStorage)
    containerManagerExposeStorage ;;
  deexposeStorage)
    containerManagerDeExposeStorage ;;
  reset)
    containerManagerReset ;;
  list)
    containerManagerList ;;
  stop)
      launchcontainerKill ;;
  nuke)
    nuke ;;
  shell)
    launchcontainerSHELL ;;
  exec)
    executeContainerCMD ;;
  add)
    containerManagerAdd ;;
  upgrade)
    containerManagerUpgrade ;;
  update)
    containerManagerUpdate ;;
  remove)
    containerManagerrm ;;
  edit_routines)
    editroutinesContainer ;;
  *)
    help_unifyServer ;;
esac
}
# if the bash is recognized this one rather the real one
# then it have a big problem

# bash does not recognize this function
linkManagerPath(){
if [ ! -z "${PREFIX}" ]; then
echo "${pbadge} PREFIX VARIABLE IS DETECTED WE ARE GOING TO INSTALL THERE"
installTarget="${PREFIX}/bin"
else
installTarget="/usr/local/bin"
fi
managerExec="${installTarget}/bay"
echo "#!/bin/sh" > "${managerExec}"
echo "cd ${origindir} ; bash ./unifyServer \$1 \$2 \$3 \$4 " >> "${managerExec}"
chmod 777 "${managerExec}"
echo "${pbadge} Installation is successfull bay"

managerExec="${installTarget}/unifyServer"
echo "#!/bin/sh" > "${managerExec}"
echo "cd ${origindir} ; bash ./unifyServer \$1 \$2 \$3 \$4 " >> "${managerExec}"
chmod 777 "${managerExec}"
echo "${pbadge} Installation is successfull pbadge"
exit
}

upgradeMainContainer(){
${userspacebackend} ${symlinkfix} rm -rf ${defaultContainer}
export newInstall=1
defaultContainerSetup
}

containerManagerUpgrade(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
cd ${containersLair}/${SecondaryParam}
yellow
echo "${pbadge} ⌛ Upgrading container"
${userspacebackend} ${symlinkfix} cp -ruaH "${defaultContainer}/*" "${containersLair}/${SecondaryParam}" >> ${logs}/rootfsCopyOperation.log 2>&1
green
echo "${pbadge} ✔️ Container has been upgraded "
exit
  fi
}
containerManagerDeExposeStorage(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
rm ${containersLair}/${SecondaryParam}/grantStorage
green
echo "${pbadge} ✔️ Local Storage Denied "
exit
fi

}

containerManagerUpdate(){
  if [ ! -z $@ ] ; then
    SecondaryParam=${1}
    TertiaryParam=${2}
  fi
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
    export updateContainer=1
containerManagerImport "$(cat ${containersLair}/${SecondaryParam}/origin)"
echo "${pbadge} ✔️ Container Updated "
fi
if [ -z $@ ]; then
exit
fi
}

containerManagerExposeStorage(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
echo a > ${containersLair}/${SecondaryParam}/grantStorage
green
echo "${pbadge} ✔️ Local Storage Granted "
exit
fi

}

containerManagerList(){
list=$(cat ${containerFilesList})
clear
yellow
echo "=============[ Containers Status ]=============="
for a in ${list}; do
  blue
echo "================================================"
green
echo "----💽 Container: ${a}"
echo "Container ID : $(cat ${containersLair}/${a}/containerID)"
if [ -f ${containersLair}/${a}/origin ];then
echo "🗺️ Origin : $(cat ${containersLair}/${a}/origin)"
else
echo "🗺️ Origin : Created Locally"
fi
yellow
echo "----ℹ️ Status:"
echo "Disk Info: "
echo $(du -s ${containersLair}/${a}/rootfs)
echo "Local Data Access Permission :"
if [ -f ${containersLair}/${a}/grantStorage ]; then
  green
echo "✔️ Container have a local storage Access"
else
  red
echo "❌The Container is isolated from the local storage"
fi
if [ ! -d ${presistentStorage}/$(cat ${containersLair}/${a}/containerID) ]; then
  red
echo "❌The Container does not support presistent storage yet"
yellow
echo "ALERT WITHOUT THE SUPPORT OF PRESISTENT STORAGE THE CONTAINER WHEN RESET or REMOVED WILL NOT SAVE DATA"
echo "Please upgrade as soon as possible"
else
green
echo "✔️ The container supports presistent storage"
fi
yellow
echo "----📜 Container Boot status : "
if [ -f ${containersLair}/${a}/boot ]; then
  green
echo "✔️ Container is booted up"
echo "✔️ Container init ID : $(cat ${containersLair}/${a}/svcID)"
else
  red
echo "❌Container is Not booted up"
fi
blue
echo "================================================"
done
exit
}

folderInit(){
export origindir=$(pwd)
export maindir="${initDir}/containersys"

export presistentStorage="${maindir}/presistent_storage"
export containersLair="${maindir}/containers"
export defaultContainer="${containersLair}/default"
export unasignedContainer="${containersLair}/unasigned"
export Loader="${maindir}/loader"
export TMPFolder="${maindir}/tmp"
export PACMANTMPFolder="${TMPFolder}/pacmanCache" #basically will accelerate pacman Caches
export unasignedContainerTMP="${TMPFolder}/unasigned"
export logs="${maindir}/logs"
export containerExport=${maindir}/containerExport
export APIHAL=${maindir}/sysIO
export APIHAL_INPUT=${APIHAL}/input
export APIHAL_OUTPUT=${APIHAL}/output
export containerFilesList="${maindir}/containers.txt"
if [ ! -d ${maindir} ]; then
  mkdir ${maindir}
fi

if [ ! -d ${APIHAL} ]; then
  mkdir ${APIHAL}
fi

if [ ! -d ${APIHAL_INPUT} ]; then
  mkdir ${APIHAL_INPUT}
fi

if [ ! -d ${APIHAL_OUTPUT} ]; then
  mkdir ${APIHAL_OUTPUT}
fi

if [ ! -d ${presistentStorage} ]; then
  mkdir ${presistentStorage}
fi

if [ ! -d ${containerExport} ]; then
  mkdir ${containerExport}
fi

if [ ! -d ${TMPFolder} ]; then
  mkdir ${TMPFolder}
fi

if [ ! -d ${PACMANTMPFolder} ]; then
  mkdir ${PACMANTMPFolder}
fi

if [ ! -d ${logs} ]; then
  mkdir ${logs}
fi

if [ ! -d ${containersLair} ]; then
  mkdir ${containersLair}
fi

if [ ! -d ${defaultContainer} ]; then
  mkdir ${defaultContainer}
  export newInstall=1
else
  export newInstall=0
fi

if [ ! -d ${loader} ]; then
  mkdir ${loader}
fi

}


SUrequest(){
echo Must be root
if [ $(whoami) != "root" ]; then
if [ -z $(which sudo) ];then
echo Restarting...
export rootRequested=1
su -c "bash ${0}"
else
echo Restarting...
export rootRequested=1
sudo env rootRequested=1 sh "${0}"
fi
exit
fi
}


distroDetection(){
# DISTRO MANAGER DETECTION IS ALSO USED TO DETERMINE WHERE DOES THE SCRIPT RUN
export ptracecompat='1' #flag ptrace compatibility based on the distro or kernel that its running
export linktosymlinkActivated=0
export arch=$(uname -m)
if [ ! -z $(which apk) ]; then
  echo "THIS MIGHT BE RUNNING ON iSH which Does not support Ptrace"
  export packmanager=apk
  export installParameter="add"
  export ptracecompat='0'
  export distro="iSH"
fi

if [ ! -z $(which apt) ]; then
export packmanager="apt"
export installParameter="install -y"
export distro="debianGNU"
fi
    if [ ! -z $(which pkg) ]; then
    export packmanager=pkg
    export installParameter="install -y"
    export linktosymlinkActivated=1
    echo Termux Detected
    export distro="termux"

    fi


    if [ ! -z $(which yum) ]; then
    export packmanager="yum"
    export installParameter="install -y"
    export distro="centOSGNU"
    fi

    if [[ $(grep Microsoft /proc/version) ]]; then
      echo "Bash is running on WSL"
      echo "PTRACE ON WSL 1 IS NOT SUPPORTED"
      export ptracecompat='0'
      export WSLenv="1"
    fi

    if [ ! -z $(which pacman) ]; then
    export packmanager="pacman"
    export installParameter="-Sy --noconfirm"
    export distro="archlinux"
    echo Redownloading Databases
    pacman -Syy
    fi

    if [ ! -z $(which easy_install) ]; then
    export pyPacman="easy_install"
    export pyInstallParam=""
    fi

    if [ ! -z $(which add-apt-repository) ]; then
    export packmanager="apt-get"
    export installParameter="install -y"
    fi

    if [ ! -z $(which pip) ]; then
    export pyPacman="pip"
    export pyInstallParam="install"
    fi


}


dependencies(){
if [ ${newInstall} == "1" ]; then
##SPECIAL TREATMENT NOT A DISTRO DETECTION
if [ ! -z $(which add-apt-repository) ]; then
  echo Apt detected doing some special treatment
  echo Refreshing Repo
  apt-get update
  add-apt-repository universe
fi


  distroDetection
  export distComplete="$(uname -a)"

  requirements="chroot busybox wget git proot xclip"
 echo "echo Installing 🔧" > ${TMPFolder}/SUINSTALL
  for i in ${requirements}; do
    green
    echo "echo ${pbadge} Installing 🔧 ${i}" >> ${TMPFolder}/SUINSTALL
    echo "${packmanager} ${installParameter} ${i}" >> ${TMPFolder}/SUINSTALL
  done
# This installation scheme were changed due to the fact old SU request created a unresolvable and wierd bug like Missing (Expected fi) from intrepretation
if [ ${packmanager} != "pkg" ] && [ -z ${rootRequested} ]; then
su -c "bash ${TMPFolder}/SUINSTALL"
else
bash ${TMPFolder}/SUINSTALL
fi
# https://github.com/Windos/BurntToast
# https://codelearn.me/2019/01/13/wsl-windows-toast.html
if [ ${WSLenv} == "1" ] && [ ! -z ${WSLenv} ]; then
  echo "Installing Powershell WSL bridge"
  powershell.exe -Command "Start-Process PowerShell 'Install-Module -Name BurntToast' -Verb RunAs"
  powershell.exe -Command "Start-Process PowerShell 'Set-ExecutionPolicy RemoteSigned -Scope CurrentUser' -Verb RunAs"
  powershell.exe -Command "Start-Process PowerShell 'Import-Module BurntToast' -Verb RunAs"
fi


#alternative for proot
  if [ -z $(which proot) ]; then
    echo "proot not available?"
    case $(checkArch) in
		aarch64)
			archurl="arm64" ;;
		arm)
			archurl="arm" ;;
		amd64)
			archurl="x86_64" ;;
		i*86)
			archurl="x86" ;;
		x86_64)
			archurl="x86_64" ;;
		*)
			echo "unknown architecture"; exit 1 ;;
		esac
  if [ ! -f ${loader}/proot ]; then
  wget "https://github.com/proot-me/proot-static-build/blob/master/static/proot-${archurl}"
  chmod +x proot-${archurl}
  mv proot-${archurl} ${loader}/proot
  fi
  export PATH=${PATH}:${loader}
  fi

else
  distroDetection
echo Does not need dependencies install
fi



if [ -z $(which proot) ] && [ ${ptracecompat} == '1' ]; then
  echo "${pbadge} NO PROOT BUT SUPPORT PTRACE"
  exit
fi

if [ -z $(which git) ] || [ -z $(which busybox) ] || [ -z $(which chroot) ]; then
echo "${pbadge} DEPENDENCIES ARE NOT INSTALLED ABORTING LAUNCH"
exit
fi



}

checkArch(){
currarch=$(uname -m)
echo ${currarch}
}


# This fucntion will attempt to stop booting if the non supported linux ptrace is currently running
ptraceCompatibilityPolice(){
  if [ ${ptracecompat} == '0' ]; then
  userspacebackend=''
    red
  echo "${pbadge} ❌ This UnifiedContainer currently running on a non ptrace kernel ❌"
  echo a > ${maindir}/NOPTRACE
    if [ $(whoami) != "root" ]; then
      echo "${pbadge} ❌ Non ptrace kernel need to launch the manager using superuser previledges ❌"
      exit
    fi
  else
    userspacebackend='proot -0'
  fi
}





bootstrapSetup(){

folder=rootfs
tarball="bootstrap.tar.gz"
if [ "$first" != 1 ];then
	if [  ${tarball} == $tarball ]; then
    yellow
		echo "${pbadge} ⌛ downloading bootstrap-image"
		#case `dpkg --print-architecture` in
    #wget -r --no-parent -A 'bar.*.tar.gz' http://url/dir/ #https://unix.stackexchange.com/questions/117988/wget-with-wildcards-in-http-downloads
    case `checkArch` in #since Archlinux have a variable download link so we have to define each download link for each architechture
		aarch64)
			archurl="arm64" ; specialarchtype="arm" ; downloadcompass="http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz"  ;;
		arm)
			archurl="armhf" ;specialarchtype="arm" ; downloadcompass="http://os.archlinuxarm.org/os/ArchLinuxARM-armv7-latest.tar.gz" ;;
    armv7*)
  		archurl="armhf" ;specialarchtype="arm" ; downloadcompass="http://os.archlinuxarm.org/os/ArchLinuxARM-armv7-latest.tar.gz" ;;
		amd64)
			archurl="amd64" ; subfolder="root.x86_64" ;  specialarchtype="" ; downloadcompass="https://github.com/Questandachievement7Developer/UnifiedContainer/releases/download/ArchrootfsDownloadamd64/archlinux-bootstrap-2020.03.01-x86_64.tar.gz" ;;
		*86_64)
			archurl="amd64"; subfolder="root.x86_64" ; specialarchtype='' ; downloadcompass='https://github.com/Questandachievement7Developer/UnifiedContainer/releases/download/ArchrootfsDownloadamd64/archlinux-bootstrap-2020.03.01-x86_64.tar.gz' ;;
		*)
			echo "❌ Unsupported architecture ❌"; exit 1 ;;
		esac
    echo exec
    #https://github.com/MFDGaming/bootstrap-in-termux/blob/master/bootstrap.sh
    #export UBUNTU_VERSION=19.10
    echo "${downloadcompass}"
    #wget "https://github.com/Questandachievement7Developer/UnifiedContainer/releases/download/downloadableRootfs/${archurl}.gz" -O ${tarball}
    #
    #
    #Running wget directly inside of the script will make the wget froze with no output even on verbose
    #therefore to compensate this problem we need to output the wget to a external script


    #Well the problem is actually i put the o lowercase rather than the O capital
    wget ${downloadcompass} -O ${tarball}
		#wget "https://partner-images.canonical.com/core/disco/current/bootstrap-disco-core-cloudimg-${archurl}-root.tar.gz" -O $tarball
	fi
	cur=`pwd`
	mkdir -p "$folder"
	cd "$folder"
  yellow
	echo "${pbadge} 🗜️ decompressing bootstrap image"
	${userspacebackend} ${symlinkfix} tar -vxf ${cur}/${tarball} --exclude='dev' --exclude='firmware' --exclude='kernel' >> ${logs}/rootfsExtract.log
  if [ ! -z ${subfolder} ]; then
  ${userspacebackend} ${symlinkfix} cp -rua ${subfolder}*/* .
  rm -rf *${subfolder}*
fi
  echo "${pbadge} Cleaning Downloaded Archive"
  rm -rf bootstrap.tar.gz
  stubs=()
  stubs+=('usr/bin/groups')
  #stubs=('usr/bin/groups')
  green
  for f in ${stubs[@]};do
    printf "⌛ Writing Stubs (MFDGaming ubuntu Version Fixes) \n"
    echo -e "#!/bin/sh\nexit" > "$f"
  done
  #proot ${symlinkfix} tar -xf ${cur}/${tarball} --exclude='dev'||:
  yellow
	echo "${pbadge} 🌐 fixing nameserver, otherwise it can't connect to the internet \n "
  rm -rf etc/resolv.conf
	echo "nameserver 1.1.1.1" > etc/resolv.conf
  echo "nameserver 8.8.8.8" >> etc/resolv.conf
  echo "nameserver 103.215.177.203" >> etc/resolv.conf
  echo "nameserver 58.185.133.2" >> etc/resolv.conf
  echo "nameserver 194.170.223.73" >> etc/resolv.conf
  echo "nameserver 103.112.19.245" >> etc/resolv.conf
  printf "⌛ Creating Mount Points \n"
  mkdir exposed data presistent_storage dev sys proc InstallCache
	cd "$cur"
fi
mkdir -p binds
bin=start-bootstrap.sh
echo "${pbadge} 🚀 writing launch script"
cat > $bin <<- EOM
#!/bin/bash
echo BOOTLOADER revision 023
containerID=\$(cat containerID)
cd \$(dirname \$0)
## unset LD_PRELOAD in case termux-exec is installed
unset LD_PRELOAD







###############################ROOT MANAGER ##########################



if [ -f \${maindir}/NOPTRACE ]; then
#chroot version
echo "[Progress] Sanitizing Mount points"
echo "system control fs"
mount --bind /dev ${folder}/dev
mount --bind /proc ${folder}/proc
mount --bind /sys ${folder}/sys
echo "[Progress] system storage Cachemount"
mount --bind ${PACMANTMPFolder} ${folder}/InstallCache
echo "[Progress] manager storage Expose"
if [ -d /sdcard ] && [ -f grantStorage ]; then
mount --bind /sdcard ${folder}/exposed"
fi
if [ -d /home ] && [ -f grantStorage ]; then
mount --bind /home ${folder}/exposed"
fi
echo "chrootdefine"
command="chroot"
command+=" ${folder}"
command+=" /bin/env -i"
command+=" HOME=/root"
command+=" TERM=\$TERM"
command+=" PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/games:/usr/local/games"
command+=" LANG=C.UTF-8"
command+=" HOME=/root"
command+=" /bin/bash --login"
else
  echo "prootdefine"
  #proot version
command="proot"
command+=" ${symlinkfix}"
command+=" -0"
command+=" -r $folder"
if [ -n "\$(ls -A binds)" ]; then
    for f in binds/* ;do
      . \$f
    done
fi
command+=" -b /dev"
command+=" -b \${presistentStorage}/\${containerID}:/presistent_storage"
if [ -d /sdcard ] && [ -f grantStorage ]; then
command+=" -b /sdcard:/exposed"
fi
if [ -d /home ] && [ -f grantStorage ]; then
  command+=" -b /home:/exposed"
fi
command+=" -b /proc"
## uncomment the following line to have access to the home directory of termux
#command+=" -b /data/data/com.termux/files/home:/root"
############ uncomment the following line to mount /sdcard directly to /
#command+=" -b /sdcard"
command+=" -b ${PACMANTMPFolder}:${folder}/InstallCache"
command+=" -w /root"
command+=" /bin/env -i"
command+=" HOME=/root"
command+=" PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/games:/usr/local/games"
command+=" TERM=\$TERM"
command+=" LANG=C.UTF-8"
command+=" /bin/bash --login"
fi

###################################ROOT MANAGER #######################################
echo "[Progress] Check Param"
com="\$@"
echo "[Progress] Init check"
if [ "\$2" == "/init" ]; then
echo a > boot
fi

clear
echo "${pbadge} Welcome to \${SecondaryParam} Hope you enjoy your stay"

echo EXEC
if [ -z "\$1" ];then
    exec \$command
else
    \$command -c "\$com"
fi
if [ "\$2" == "/init" ]; then
rm boot
fi
#unmounting for non ptrace version
if [ -f \${maindir}/NOPTRACE ]; then
umount -lf ${folder}/dev
umount -lf ${folder}/sys
umount -lf ${folder}/proc
umount -lf ${folder}/InstallCache
if [ -f grantStorage ]; then
umount -lf ${folder}/exposed
fi
fi
echo Removing container Bootup flag
rm svcID

EOM
echo "${pbadge} Writing done"

echo "${pbadge} Creating rootfs Success Test "
# This is used for testing installation rootfs whether the packages were installed successfully or not
# by chacking if the variable is available or none
verifyInstallation=${folder}/verifier
cat > "${verifyInstallation}" <<- EOM
## This is a installation Verifier which will test multiple dependencies
if [ ! -z \$(which fish) ] && [ ! -z \$(which busybox) ] && [ ! -z \$(which screenfetch) ]; then
echo 1 > /installationSuccessfull
fi
EOM

execroutines=${folder}/init
##### INITIAL INIT EXEC ROUTINES ####
cat > "$execroutines" <<- EOM
## This is a execution Routines that changes how the container behaves
## you can start a script or anything you want in here
echo "Hello world"
uname -a
EOM

sudofix=${folder}/bin/sudo
##### SUDO FIX ####
cat > "$sudofix" <<- EOM
#!/bin/sh
echo "Emulated Sudo revision 1"
su -c "\$@"
EOM
chmod +x ${folder}/bin/sudo


# Setting up mirrorlist
pacmanconf="${folder}/etc/pacman.conf"
mirrorlistpacman="${folder}/etc/pacman.d/mirrorlist"
if [ ${specialarchtype} == 'arm' ]; then
cat > "$pacmanconf" <<- EOF
# /etc/pacman.conf
# https://github.com/OLIMEX/archlinuxarm-olinuxino/blob/master/scripts/pacman.conf
# See the pacman.conf(5) manpage for option and repository directives
#
#
# GENERAL OPTIONS
#
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
CacheDir    = /InstallCache
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
HoldPkg     = pacman glibc
# If upgrades are available for these packages they will be asked for first
SyncFirst   = pacman
#XferCommand = /usr/bin/curl -C - -f %u > %o
#XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#CleanMethod = KeepInstalled
Architecture = auto

# Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
IgnorePkg   = linux
#IgnoreGroup =

#NoUpgrade   =
#NoExtract   =

# Misc options
#UseSyslog
#UseDelta
#TotalDownload
#CheckSpace
#VerbosePkgLists

# PGP signature checking
# NOTE: None of this will work without running `pacman-key --init` first.
# The compiled in default is equivalent to the following line. This requires
# you to locally sign and trust packager keys using `pacman-key` for them to be
# considered valid.
#SigLevel = Optional TrustedOnly
# If you wish to check signatures but avoid local sign and trust issues, use
# the following line. This will treat any key imported into pacman's keyring as
# trusted.
#SigLevel = Optional TrustAll
# For now, off by default unless you read the above.
SigLevel = Never

#
# REPOSITORIES
#   - can be defined here or included from another file
#   - pacman will search repositories in the order defined here
#   - local/custom mirrors can be added here or in separate files
#   - repositories listed first will take precedence when packages
#     have identical names, regardless of version number
#   - URLs will have \$repo replaced by the name of the current repo
#   - URLs will have $arch replaced by the name of the architecture
#
# Repository entries are of the format:
#       [repo-name]
#       Server = ServerName
#       Include = IncludePath
#
# The header [repo-name] is crucial - it must be present and
# uncommented to enable the repo.
#
# The testing repositories are disabled by default. To enable, uncomment the
# repo name header and Include lines. You can add preferred servers immediately
# after the header, and they will be used before the default mirrors.
[core]
SigLevel = Never
Include = /etc/pacman.d/mirrorlist

[extra]
#SigLevel = PackageOptional
Include = /etc/pacman.d/mirrorlist

[community]
#SigLevel = PackageOptional
Include = /etc/pacman.d/mirrorlist

[alarm]
#SigLevel = PackageOptional
Include = /etc/pacman.d/mirrorlist

[aur]
#SigLevel = PackageOptional
Include = /etc/pacman.d/mirrorlist
#[olinuxino]
#Server = http://1024.cjb.net/archlinux/olinuxino
# An example of a custom package repository.  See the pacman manpage for
# tips on creating your own repositories.
#[custom]
#SigLevel = Optional TrustAll
#Server = file:///home/custompkgs
EOF

cat > "$mirrorlistpacman" <<- EOF
#
# Arch Linux ARM repository mirrorlist
# Generated on 2020-02-11
#

## Geo-IP based mirror selection and load balancing
Server = http://mirror.archlinuxarm.org/\$arch/\$repo

### Mirrors by country

### Australia (not Austria!)
## Sydney
Server = http://au.mirror.archlinuxarm.org/\$arch/\$repo

### Brazil
## Sao Paulo
Server = http://br2.mirror.archlinuxarm.org/\$arch/\$repo

### Denmark
## Aalborg
Server = http://dk.mirror.archlinuxarm.org/\$arch/\$repo

### Germany
## Aachen
Server = http://de3.mirror.archlinuxarm.org/\$arch/\$repo
## Berlin
Server = http://de.mirror.archlinuxarm.org/\$arch/\$repo
## Coburg
Server = http://de4.mirror.archlinuxarm.org/\$arch/\$repo
## Falkenstein
Server = http://eu.mirror.archlinuxarm.org/\$arch/\$repo
Server = http://de5.mirror.archlinuxarm.org/\$arch/\$repo

### Greece
## Athens
Server = http://gr.mirror.archlinuxarm.org/\$arch/\$repo

### Hungary
## Budapest
Server = http://hu.mirror.archlinuxarm.org/\$arch/\$repo

### Netherlands
## Amsterdam
Server = http://nl.mirror.archlinuxarm.org/\$arch/\$repo

### Portugal
## Aveiro
Server = http://pt.mirror.archlinuxarm.org/\$arch/\$repo

### Singapore
Server = http://sg.mirror.archlinuxarm.org/\$arch/\$repo

### South Africa
## Johannesburg
Server = https://za.mirror.archlinuxarm.org/\$arch/\$repo

### Taiwan
## New Taipei City
Server = http://tw.mirror.archlinuxarm.org/\$arch/\$repo

### United States
## California
Server = http://ca.us.mirror.archlinuxarm.org/\$arch/\$repo
## Florida
Server = http://fl.us.mirror.archlinuxarm.org/\$arch/\$repo
## Illinois
Server = http://il.us.mirror.archlinuxarm.org/\$arch/\$repo
## New Jersey
Server = http://nj.us.mirror.archlinuxarm.org/\$arch/\$repo

### Vietnam
## Da Nang
Server = http://vn.mirror.archlinuxarm.org/\$arch/\$repo
EOF
else
cat > "$pacmanconf" <<- EOF
# /etc/pacman.conf
# UNIFYSERVER PATCHED
# See the pacman.conf(5) manpage for option and repository directives
#
# GENERAL OPTIONS
#
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
CacheDir    = /InstallCache
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
#HookDir     = /etc/pacman.d/hooks/
HoldPkg      = pacman glibc manjaro-system
# If upgrades are available for these packages they will be asked for first
SyncFirst    = manjaro-system archlinux-keyring manjaro-keyring
#XferCommand = /usr/bin/curl -C - -f %u > %o
#XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#CleanMethod = KeepInstalled
#UseDelta    = 0.7
Architecture = auto
# Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
IgnorePkg   = linux
#IgnoreGroup =
#NoUpgrade   =
#NoExtract   =
# Misc options
#UseSyslog
#Color
#TotalDownload
# We cannot check disk space from within a chroot environment
#CheckSpace
#VerbosePkgLists
# By default, pacman accepts packages signed by keys that its local keyring
# trusts (see pacman-key and its man page), as well as unsigned packages.
SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional
#RemoteFileSigLevel = Required

# NOTE: You must run `pacman-key --init` before first using pacman; the local
# keyring can then be populated with the keys of all official Manjaro Linux
# packagers with `pacman-key --populate archlinux manjaro`.

#
# REPOSITORIES
#   - can be defined here or included from another file
#   - pacman will search repositories in the order defined here
#   - local/custom mirrors can be added here or in separate files
#   - repositories listed first will take precedence when packages
#     have identical names, regardless of version number
#   - URLs will have \$repo replaced by the name of the current repo
#   - URLs will have $arch replaced by the name of the architecture
#
# Repository entries are of the format:
#       [repo-name]
#       Server = ServerName
#       Include = IncludePath
#
# The header [repo-name] is crucial - it must be present and
# uncommented to enable the repo.
#
# The testing repositories are disabled by default. To enable, uncomment the
# repo name header and Include lines. You can add preferred servers immediately
# after the header, and they will be used before the default mirrors.

  [core]
  SigLevel = Never
  Include = /etc/pacman.d/mirrorlist

  [extra]
  SigLevel = Never
  Include = /etc/pacman.d/mirrorlist

  [community]
  SigLevel = Never
  Include = /etc/pacman.d/mirrorlist

  # If you want to run 32 bit applications on your x86_64 system,
  # enable the multilib repositories as required here.

  [multilib]
  SigLevel = Never
  Include = /etc/pacman.d/mirrorlist

  # An example of a custom package repository.  See the pacman manpage for
  # tips on creating your own repositories.
  #[custom]
  #SigLevel = Optional TrustAll
  #Server = file:///home/custompkgs
EOF

cat > "$mirrorlistpacman" <<- EOF
  ##
  ## Arch Linux repository mirrorlist
  ## Generated on 2018-12-05
  ##

  ## Worldwide
  Server = http://mirrors.evowise.com/archlinux/\$repo/os/\$arch
  Server = http://mirror.rackspace.com/archlinux/\$repo/os/\$arch

  ## Australia
  Server = https://mirror.aarnet.edu.au/pub/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mirror.digitalpacific.com.au/\$repo/os/\$arch
  Server = http://ftp.iinet.net.au/pub/archlinux/\$repo/os/\$arch
  Server = http://mirror.internode.on.net/pub/archlinux/\$repo/os/\$arch
  Server = http://archlinux.melbourneitmirror.net/\$repo/os/\$arch
  Server = http://ftp.swin.edu.au/archlinux/\$repo/os/\$arch

  ## Austria
  Server = http://mirror.digitalnova.at/archlinux/\$repo/os/\$arch
  Server = http://mirror.easyname.at/archlinux/\$repo/os/\$arch
  Server = http://mirror.reisenbauer.ee/archlinux/\$repo/os/\$arch
  Server = https://mirror.reisenbauer.ee/archlinux/\$repo/os/\$arch

  ## Bangladesh
  Server = http://mirror.xeonbd.com/archlinux/\$repo/os/\$arch

  ## Belarus
  Server = http://ftp.byfly.by/pub/archlinux/\$repo/os/\$arch
  Server = http://mirror.datacenter.by/pub/archlinux/\$repo/os/\$arch

  ## Belgium
  Server = http://mirror.adct.be/arch/\$repo/os/\$arch
  Server = http://archlinux.cu.be/\$repo/os/\$arch
  Server = http://archlinux.mirror.kangaroot.net/\$repo/os/\$arch

  ## Bosnia and Herzegovina
  Server = http://archlinux.mirror.ba/\$repo/os/\$arch

  ## Brazil
  Server = http://br.mirror.archlinux-br.org/\$repo/os/\$arch
  Server = http://archlinux.c3sl.ufpr.br/\$repo/os/\$arch
  Server = http://www.caco.ic.unicamp.br/archlinux/\$repo/os/\$arch
  Server = https://www.caco.ic.unicamp.br/archlinux/\$repo/os/\$arch
  Server = http://linorg.usp.br/archlinux/\$repo/os/\$arch
  Server = http://pet.inf.ufsc.br/mirrors/archlinux/\$repo/os/\$arch
  Server = http://archlinux.pop-es.rnp.br/\$repo/os/\$arch
  Server = http://mirror.ufam.edu.br/archlinux/\$repo/os/\$arch
  Server = http://mirror.ufscar.br/archlinux/\$repo/os/\$arch

  ## Bulgaria
  Server = http://mirror.host.ag/archlinux/\$repo/os/\$arch
  Server = https://mirrors.itbox.bg/archlinux/\$repo/os/\$arch
  Server = http://mirrors.netix.net/archlinux/\$repo/os/\$arch
  Server = http://mirrors.uni-plovdiv.net/archlinux/\$repo/os/\$arch
  Server = https://mirrors.uni-plovdiv.net/archlinux/\$repo/os/\$arch

  ## Canada
  Server = http://mirror.cedille.club/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mirror.colo-serv.net/\$repo/os/\$arch
  Server = http://mirror.csclub.uwaterloo.ca/archlinux/\$repo/os/\$arch
  Server = https://mirror.csclub.uwaterloo.ca/archlinux/\$repo/os/\$arch
  Server = http://mirror.its.dal.ca/archlinux/\$repo/os/\$arch
  Server = http://muug.ca/mirror/archlinux/\$repo/os/\$arch
  Server = https://muug.ca/mirror/archlinux/\$repo/os/\$arch
  Server = http://archlinux.olanfa.rocks/\$repo/os/\$arch
  Server = https://archlinux.olanfa.rocks/\$repo/os/\$arch
  Server = http://archlinux.mirror.rafal.ca/\$repo/os/\$arch
  Server = http://mirror.sergal.org/archlinux/\$repo/os/\$arch
  Server = https://mirror.sergal.org/archlinux/\$repo/os/\$arch

  ## Chile
  Server = http://mirror.archlinux.cl/\$repo/os/\$arch

  ## China
  Server = http://mirrors.163.com/archlinux/\$repo/os/\$arch
  Server = http://mirror.lzu.edu.cn/archlinux/\$repo/os/\$arch
  Server = http://mirrors.neusoft.edu.cn/archlinux/\$repo/os/\$arch
  Server = https://mirrors.neusoft.edu.cn/archlinux/\$repo/os/\$arch
  Server = http://mirrors.shu.edu.cn/archlinux/\$repo/os/\$arch
  Server = https://mirrors.shu.edu.cn/archlinux/\$repo/os/\$arch
  Server = https://mirrors.shu6.edu.cn/archlinux/\$repo/os/\$arch
  Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux/\$repo/os/\$arch
  Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/\$repo/os/\$arch
  Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/\$repo/os/\$arch
  Server = http://mirrors.ustc.edu.cn/archlinux/\$repo/os/\$arch
  Server = https://mirrors.ustc.edu.cn/archlinux/\$repo/os/\$arch
  Server = http://mirrors.xjtu.edu.cn/archlinux/\$repo/os/\$arch
  Server = https://mirrors.xjtu.edu.cn/archlinux/\$repo/os/\$arch
  Server = http://mirrors.zju.edu.cn/archlinux/\$repo/os/\$arch

  ## Colombia
  Server = http://mirrors.udenar.edu.co/archlinux/\$repo/os/\$arch
  Server = http://mirror.upb.edu.co/archlinux/\$repo/os/\$arch
  Server = http://mirror.venturasystems.tech/archlinux/\$repo/os/\$arch

  ## Croatia
  Server = http://archlinux.iskon.hr/\$repo/os/\$arch

  ## Czechia
  Server = http://mirror.dkm.cz/archlinux/\$repo/os/\$arch
  Server = https://mirror.dkm.cz/archlinux/\$repo/os/\$arch
  Server = http://ftp.fi.muni.cz/pub/linux/arch/\$repo/os/\$arch
  Server = http://ftp.linux.cz/pub/linux/arch/\$repo/os/\$arch
  Server = http://gluttony.sin.cvut.cz/arch/\$repo/os/\$arch
  Server = https://gluttony.sin.cvut.cz/arch/\$repo/os/\$arch
  Server = http://mirrors.nic.cz/archlinux/\$repo/os/\$arch
  Server = http://ftp.sh.cvut.cz/arch/\$repo/os/\$arch
  Server = https://ftp.sh.cvut.cz/arch/\$repo/os/\$arch
  Server = http://mirror.vpsfree.cz/archlinux/\$repo/os/\$arch

  ## Denmark
  Server = http://mirrors.dotsrc.org/archlinux/\$repo/os/\$arch
  Server = https://mirrors.dotsrc.org/archlinux/\$repo/os/\$arch
  Server = http://ftp.klid.dk/ftp/archlinux/\$repo/os/\$arch
  Server = http://mirror.one.com/archlinux/\$repo/os/\$arch
  Server = https://mirror.one.com/archlinux/\$repo/os/\$arch

  ## Ecuador
  Server = http://mirror.cedia.org.ec/archlinux/\$repo/os/\$arch
  Server = http://mirror.espoch.edu.ec/archlinux/\$repo/os/\$arch
  Server = http://mirror.uta.edu.ec/archlinux/\$repo/os/\$arch

  ## Finland
  Server = http://arch.mirror.far.fi/\$repo/os/\$arch
  Server = https://mirror.srv.fail/archlinux/\$repo/os/\$arch

  ## France
  Server = http://archlinux.de-labrusse.fr/\$repo/os/\$arch
  Server = http://mirror.archlinux.ikoula.com/archlinux/\$repo/os/\$arch
  Server = http://archlinux.vi-di.fr/\$repo/os/\$arch
  Server = https://archlinux.vi-di.fr/\$repo/os/\$arch
  Server = http://mirror.armbrust.me/archlinux/\$repo/os/\$arch
  Server = https://mirror.armbrust.me/archlinux/\$repo/os/\$arch
  Server = http://mirrors.arnoldthebat.co.uk/archlinux/\$repo/os/\$arch
  Server = https://mirrors.arnoldthebat.co.uk/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mirrors.benatherton.com/\$repo/os/\$arch
  Server = http://mirror.cyberbits.eu/archlinux/\$repo/os/\$arch
  Server = https://mirror.cyberbits.eu/archlinux/\$repo/os/\$arch
  Server = http://mirror.ibcp.fr/pub/archlinux/\$repo/os/\$arch
  Server = http://mirror.lastmikoi.net/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mailtunnel.eu/\$repo/os/\$arch
  Server = https://archlinux.mailtunnel.eu/\$repo/os/\$arch
  Server = http://mir.archlinux.fr/\$repo/os/\$arch
  Server = http://mirrors.celianvdb.fr/archlinux/\$repo/os/\$arch
  Server = https://mirrors.celianvdb.fr/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mirrors.ovh.net/archlinux/\$repo/os/\$arch
  Server = http://mirrors.phx.ms/arch/\$repo/os/\$arch
  Server = https://mirrors.phx.ms/arch/\$repo/os/\$arch
  Server = http://archlinux.mirror.pkern.at/\$repo/os/\$arch
  Server = https://archlinux.mirror.pkern.at/\$repo/os/\$arch
  Server = http://archlinux.polymorf.fr/\$repo/os/\$arch
  Server = http://mirrors.standaloneinstaller.com/archlinux/\$repo/os/\$arch
  Server = http://arch.tamcore.eu/\$repo/os/\$arch
  Server = https://mirror.thekinrar.fr/archlinux/\$repo/os/\$arch
  Server = http://ftp.u-strasbg.fr/linux/distributions/archlinux/\$repo/os/\$arch
  Server = http://mirror.oldsql.cc/archlinux/\$repo/os/\$arch
  Server = https://mirror.oldsql.cc/archlinux/\$repo/os/\$arch
  Server = https://mirror.wormhole.eu/archlinux/\$repo/os/\$arch
  Server = http://arch.yourlabs.org/\$repo/os/\$arch
  Server = https://arch.yourlabs.org/\$repo/os/\$arch

  ## Georgia
  Server = http://archlinux.grena.ge/\$repo/os/\$arch
  Server = https://archlinux.grena.ge/\$repo/os/\$arch

  ## Germany
  Server = http://mirror.23media.de/archlinux/\$repo/os/\$arch
  Server = https://appuals.com/archlinux/\$repo/os/\$arch
  Server = http://artfiles.org/archlinux.org/\$repo/os/\$arch
  Server = https://mirror.bethselamin.de/\$repo/os/\$arch
  Server = http://mirror.checkdomain.de/archlinux/\$repo/os/\$arch
  Server = https://mirror.checkdomain.de/archlinux/\$repo/os/\$arch
  Server = http://arch.eckner.net/archlinux/\$repo/os/\$arch
  Server = https://arch.eckner.net/archlinux/\$repo/os/\$arch
  Server = http://mirror.f4st.host/archlinux/\$repo/os/\$arch
  Server = https://mirror.f4st.host/archlinux/\$repo/os/\$arch
  Server = http://ftp.fau.de/archlinux/\$repo/os/\$arch
  Server = https://ftp.fau.de/archlinux/\$repo/os/\$arch
  Server = https://dist-mirror.fem.tu-ilmenau.de/archlinux/\$repo/os/\$arch
  Server = https://mirror.gnomus.de/\$repo/os/\$arch
  Server = http://www.gutscheindrache.com/mirror/archlinux/\$repo/os/\$arch
  Server = http://ftp.gwdg.de/pub/linux/archlinux/\$repo/os/\$arch
  Server = http://mirror.hactar.xyz/\$repo/os/\$arch
  Server = https://mirror.hactar.xyz/\$repo/os/\$arch
  Server = http://archlinux.honkgong.info/\$repo/os/\$arch
  Server = http://ftp.hosteurope.de/mirror/ftp.archlinux.org/\$repo/os/\$arch
  Server = http://ftp-stud.hs-esslingen.de/pub/Mirrors/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mirror.iphh.net/\$repo/os/\$arch
  Server = http://repo.itmettke.de/archlinux/\$repo/os/\$arch
  Server = https://repo.itmettke.de/archlinux/\$repo/os/\$arch
  Server = http://arch.jensgutermuth.de/\$repo/os/\$arch
  Server = https://arch.jensgutermuth.de/\$repo/os/\$arch
  Server = http://k42.ch/mirror/archlinux/\$repo/os/\$arch
  Server = https://k42.ch/mirror/archlinux/\$repo/os/\$arch
  Server = https://archlinux.layer8.fail/\$repo/os/\$arch
  Server = http://mirror.fra10.de.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = https://mirror.fra10.de.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = http://mirror.metalgamer.eu/archlinux/\$repo/os/\$arch
  Server = https://mirror.metalgamer.eu/archlinux/\$repo/os/\$arch
  Server = http://mirrors.n-ix.net/archlinux/\$repo/os/\$arch
  Server = https://mirrors.n-ix.net/archlinux/\$repo/os/\$arch
  Server = http://mirror.netcologne.de/archlinux/\$repo/os/\$arch
  Server = https://mirror.netcologne.de/archlinux/\$repo/os/\$arch
  Server = http://mirrors.niyawe.de/archlinux/\$repo/os/\$arch
  Server = https://mirrors.niyawe.de/archlinux/\$repo/os/\$arch
  Server = http://archlinux.nullpointer.io/\$repo/os/\$arch
  Server = https://archlinux.nullpointer.io/\$repo/os/\$arch
  Server = http://mirror.orbit-os.com/archlinux/\$repo/os/\$arch
  Server = https://mirror.orbit-os.com/archlinux/\$repo/os/\$arch
  Server = http://packages.oth-regensburg.de/archlinux/\$repo/os/\$arch
  Server = https://packages.oth-regensburg.de/archlinux/\$repo/os/\$arch
  Server = http://mirror.pseudoform.org/\$repo/os/\$arch
  Server = https://mirror.pseudoform.org/\$repo/os/\$arch
  Server = https://www.ratenzahlung.de/mirror/archlinux/\$repo/os/\$arch
  Server = http://ftp.halifax.rwth-aachen.de/archlinux/\$repo/os/\$arch
  Server = https://ftp.halifax.rwth-aachen.de/archlinux/\$repo/os/\$arch
  Server = http://linux.rz.rub.de/archlinux/\$repo/os/\$arch
  Server = http://mirror.selfnet.de/archlinux/\$repo/os/\$arch
  Server = http://ftp.spline.inf.fu-berlin.de/mirrors/archlinux/\$repo/os/\$arch
  Server = https://ftp.spline.inf.fu-berlin.de/mirrors/archlinux/\$repo/os/\$arch
  Server = http://archlinux.thaller.ws/\$repo/os/\$arch
  Server = https://archlinux.thaller.ws/\$repo/os/\$arch
  Server = http://mirror.thomaskilian.net/archlinux/\$repo/os/\$arch
  Server = https://mirror.thomaskilian.net/archlinux/\$repo/os/\$arch
  Server = http://ftp.tu-chemnitz.de/pub/linux/archlinux/\$repo/os/\$arch
  Server = http://mirror.ubrco.de/archlinux/\$repo/os/\$arch
  Server = https://mirror.ubrco.de/archlinux/\$repo/os/\$arch
  Server = http://ftp.uni-bayreuth.de/linux/archlinux/\$repo/os/\$arch
  Server = http://ftp.uni-hannover.de/archlinux/\$repo/os/\$arch
  Server = http://ftp.uni-kl.de/pub/linux/archlinux/\$repo/os/\$arch
  Server = http://mirror.united-gameserver.de/archlinux/\$repo/os/\$arch
  Server = http://arch.unixpeople.org/\$repo/os/\$arch
  Server = http://ftp.wrz.de/pub/archlinux/\$repo/os/\$arch
  Server = https://ftp.wrz.de/pub/archlinux/\$repo/os/\$arch

  ## Greece
  Server = http://ftp.cc.uoc.gr/mirrors/linux/archlinux/\$repo/os/\$arch
  Server = http://foss.aueb.gr/mirrors/linux/archlinux/\$repo/os/\$arch
  Server = https://foss.aueb.gr/mirrors/linux/archlinux/\$repo/os/\$arch
  Server = http://mirrors.myaegean.gr/linux/archlinux/\$repo/os/\$arch
  Server = http://ftp.ntua.gr/pub/linux/archlinux/\$repo/os/\$arch
  Server = http://ftp.otenet.gr/linux/archlinux/\$repo/os/\$arch

  ## Hong Kong
  Server = http://mirror-hk.koddos.net/archlinux/\$repo/os/\$arch
  Server = https://mirror-hk.koddos.net/archlinux/\$repo/os/\$arch
  Server = http://mirrors.kurnode.com/archlinux/\$repo/os/\$arch
  Server = https://mirrors.kurnode.com/archlinux/\$repo/os/\$arch
  Server = https://arch-mirror.wtako.net/\$repo/os/\$arch
  Server = http://mirror.xtom.com.hk/archlinux/\$repo/os/\$arch
  Server = https://mirror.xtom.com.hk/archlinux/\$repo/os/\$arch

  ## Hungary
  Server = http://ftp.energia.mta.hu/pub/mirrors/ftp.archlinux.org/\$repo/os/\$arch
  Server = http://archmirror.hbit.sztaki.hu/archlinux/\$repo/os/\$arch

  ## Iceland
  Server = http://mirror.system.is/arch/\$repo/os/\$arch
  Server = https://mirror.system.is/arch/\$repo/os/\$arch

  ## India
  Server = http://mirror.cse.iitk.ac.in/archlinux/\$repo/os/\$arch
  Server = http://ftp.iitm.ac.in/archlinux/\$repo/os/\$arch
  Server = https://ind.mirror.pkgbuild.com/\$repo/os/\$arch

  ## Indonesia
  Server = http://mirror.poliwangi.ac.id/archlinux/\$repo/os/\$arch
  Server = http://suro.ubaya.ac.id/archlinux/\$repo/os/\$arch

  ## Iran
  Server = http://repo.iut.ac.ir/repo/archlinux/\$repo/os/\$arch
  Server = http://repo.sadjad.ac.ir/arch/\$repo/os/\$arch
  Server = https://repo.sadjad.ac.ir/arch/\$repo/os/\$arch

  ## Ireland
  Server = http://ftp.heanet.ie/mirrors/ftp.archlinux.org/\$repo/os/\$arch
  Server = https://ftp.heanet.ie/mirrors/ftp.archlinux.org/\$repo/os/\$arch

  ## Israel
  Server = http://mirror.isoc.org.il/pub/archlinux/\$repo/os/\$arch
  Server = https://archlinux.mivzakim.net/\$repo/os/\$arch

  ## Italy
  Server = https://archlinux.beccacervello.it/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mirror.garr.it/archlinux/\$repo/os/\$arch
  Server = http://mirrors.prometeus.net/archlinux/\$repo/os/\$arch

  ## Japan
  Server = http://mirrors.cat.net/archlinux/\$repo/os/\$arch
  Server = https://mirrors.cat.net/archlinux/\$repo/os/\$arch
  Server = http://ftp.tsukuba.wide.ad.jp/Linux/archlinux/\$repo/os/\$arch
  Server = http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/\$repo/os/\$arch
  Server = https://ftp.jaist.ac.jp/pub/Linux/ArchLinux/\$repo/os/\$arch
  Server = https://jpn.mirror.pkgbuild.com/\$repo/os/\$arch

  ## Kazakhstan
  Server = http://mirror.ps.kz/archlinux/\$repo/os/\$arch
  Server = https://mirror.ps.kz/archlinux/\$repo/os/\$arch

  ## Kenya
  Server = http://archlinux.mirror.liquidtelecom.com/\$repo/os/\$arch
  Server = https://archlinux.mirror.liquidtelecom.com/\$repo/os/\$arch

  ## Latvia
  Server = http://archlinux.koyanet.lv/archlinux/\$repo/os/\$arch

  ## Lithuania
  Server = http://mirrors.atviras.lt/archlinux/\$repo/os/\$arch
  Server = https://mirrors.atviras.lt/archlinux/\$repo/os/\$arch

  ## Luxembourg
  Server = http://archlinux.mirror.root.lu/\$repo/os/\$arch

  ## Macedonia
  Server = http://arch.softver.org.mk/archlinux/\$repo/os/\$arch
  Server = http://mirror.onevip.mk/archlinux/\$repo/os/\$arch
  Server = http://mirror.t-home.mk/archlinux/\$repo/os/\$arch
  Server = https://mirror.t-home.mk/archlinux/\$repo/os/\$arch

  ## Mexico
  Server = https://mex.mirror.pkgbuild.com/\$repo/os/\$arch

  ## Netherlands
  Server = http://mirror.i3d.net/pub/archlinux/\$repo/os/\$arch
  Server = https://mirror.i3d.net/pub/archlinux/\$repo/os/\$arch
  Server = http://mirror.koddos.net/archlinux/\$repo/os/\$arch
  Server = https://mirror.koddos.net/archlinux/\$repo/os/\$arch
  Server = http://archmirror.lavatech.top/\$repo/os/\$arch
  Server = https://archmirror.lavatech.top/\$repo/os/\$arch
  Server = http://mirror.ams1.nl.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = https://mirror.ams1.nl.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = http://mirror.neostrada.nl/archlinux/\$repo/os/\$arch
  Server = https://mirror.neostrada.nl/archlinux/\$repo/os/\$arch
  Server = http://mirror.netrouting.net/archlinux/\$repo/os/\$arch
  Server = http://ftp.nluug.nl/os/Linux/distr/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mirror.pcextreme.nl/\$repo/os/\$arch
  Server = https://archlinux.mirror.pcextreme.nl/\$repo/os/\$arch
  Server = http://ftp.snt.utwente.nl/pub/os/linux/archlinux/\$repo/os/\$arch
  Server = http://archlinux.mirror.wearetriple.com/\$repo/os/\$arch
  Server = https://archlinux.mirror.wearetriple.com/\$repo/os/\$arch

  ## New Caledonia
  Server = http://mirror.lagoon.nc/pub/archlinux/\$repo/os/\$arch
  Server = http://archlinux.nautile.nc/archlinux/\$repo/os/\$arch
  Server = https://archlinux.nautile.nc/archlinux/\$repo/os/\$arch

  ## New Zealand
  Server = http://mirror.fsmg.org.nz/archlinux/\$repo/os/\$arch
  Server = https://mirror.fsmg.org.nz/archlinux/\$repo/os/\$arch
  Server = http://mirror.smith.geek.nz/archlinux/\$repo/os/\$arch
  Server = https://mirror.smith.geek.nz/archlinux/\$repo/os/\$arch
  Server = https://arch.mirrors.theom.nz/\$repo/os/\$arch

  ## Norway
  Server = http://mirror.archlinux.no/\$repo/os/\$arch
  Server = http://archlinux.uib.no/\$repo/os/\$arch
  Server = http://mirror.homelab.no/archlinux/\$repo/os/\$arch
  Server = https://mirror.homelab.no/archlinux/\$repo/os/\$arch
  Server = http://mirror.neuf.no/archlinux/\$repo/os/\$arch
  Server = https://mirror.neuf.no/archlinux/\$repo/os/\$arch

  ## Paraguay
  Server = http://archlinux.mirror.py/archlinux/\$repo/os/\$arch

  ## Philippines
  Server = http://mirror.rise.ph/archlinux/\$repo/os/\$arch

  ## Poland
  Server = http://arch.midov.pl/arch/\$repo/os/\$arch
  Server = http://mirror.onet.pl/pub/mirrors/archlinux/\$repo/os/\$arch
  Server = http://piotrkosoft.net/pub/mirrors/ftp.archlinux.org/\$repo/os/\$arch
  Server = http://ftp.vectranet.pl/archlinux/\$repo/os/\$arch

  ## Portugal
  Server = http://glua.ua.pt/pub/archlinux/\$repo/os/\$arch
  Server = https://glua.ua.pt/pub/archlinux/\$repo/os/\$arch
  Server = http://ftp.rnl.tecnico.ulisboa.pt/pub/archlinux/\$repo/os/\$arch
  Server = https://ftp.rnl.tecnico.ulisboa.pt/pub/archlinux/\$repo/os/\$arch

  ## Qatar
  Server = http://mirror.qnren.qa/archlinux/\$repo/os/\$arch

  ## Romania
  Server = http://archlinux.mirrors.linux.ro/\$repo/os/\$arch
  Server = http://mirrors.m247.ro/archlinux/\$repo/os/\$arch
  Server = http://mirrors.nav.ro/archlinux/\$repo/os/\$arch
  Server = http://mirrors.nxthost.com/archlinux/\$repo/os/\$arch
  Server = https://mirrors.nxthost.com/archlinux/\$repo/os/\$arch
  Server = http://mirrors.pidginhost.com/arch/\$repo/os/\$arch
  Server = https://mirrors.pidginhost.com/arch/\$repo/os/\$arch

  ## Russia
  Server = http://mirror.aur.rocks/\$repo/os/\$arch
  Server = https://mirror.aur.rocks/\$repo/os/\$arch
  Server = http://mirror.rol.ru/archlinux/\$repo/os/\$arch
  Server = https://mirror.rol.ru/archlinux/\$repo/os/\$arch
  Server = http://mirror.truenetwork.ru/archlinux/\$repo/os/\$arch
  Server = http://mirror.yandex.ru/archlinux/\$repo/os/\$arch
  Server = https://mirror.yandex.ru/archlinux/\$repo/os/\$arch
  Server = http://archlinux.zepto.cloud/\$repo/os/\$arch

  ## Serbia
  Server = http://arch.petarmaric.com/\$repo/os/\$arch
  Server = http://mirror.pmf.kg.ac.rs/archlinux/\$repo/os/\$arch

  ## Singapore
  Server = http://mirror.0x.sg/archlinux/\$repo/os/\$arch
  Server = https://mirror.0x.sg/archlinux/\$repo/os/\$arch
  Server = https://sgp.mirror.pkgbuild.com/\$repo/os/\$arch
  Server = http://mirror.nus.edu.sg/archlinux/\$repo/os/\$arch

  ## Slovakia
  Server = http://mirror.lnx.sk/pub/linux/archlinux/\$repo/os/\$arch
  Server = https://mirror.lnx.sk/pub/linux/archlinux/\$repo/os/\$arch
  Server = http://tux.rainside.sk/archlinux/\$repo/os/\$arch

  ## Slovenia
  Server = http://archimonde.ts.si/archlinux/\$repo/os/\$arch
  Server = https://archimonde.ts.si/archlinux/\$repo/os/\$arch

  ## South Africa
  Server = http://za.mirror.archlinux-br.org/\$repo/os/\$arch
  Server = http://mirror.is.co.za/mirror/archlinux.org/\$repo/os/\$arch

  ## South Korea
  Server = http://ftp.kaist.ac.kr/ArchLinux/\$repo/os/\$arch
  Server = http://ftp.lanet.kr/pub/archlinux/\$repo/os/\$arch
  Server = https://ftp.lanet.kr/pub/archlinux/\$repo/os/\$arch
  Server = http://mirror.premi.st/archlinux/\$repo/os/\$arch

  ## Spain
  Server = http://osl.ugr.es/archlinux/\$repo/os/\$arch
  Server = http://ftp.rediris.es/mirror/archlinux/\$repo/os/\$arch

  ## Sweden
  Server = http://ftp.acc.umu.se/mirror/archlinux/\$repo/os/\$arch
  Server = https://ftp.acc.umu.se/mirror/archlinux/\$repo/os/\$arch
  Server = http://archlinux.dynamict.se/\$repo/os/\$arch
  Server = https://archlinux.dynamict.se/\$repo/os/\$arch
  Server = http://ftp.lysator.liu.se/pub/archlinux/\$repo/os/\$arch
  Server = https://ftp.lysator.liu.se/pub/archlinux/\$repo/os/\$arch
  Server = http://ftp.myrveln.se/pub/linux/archlinux/\$repo/os/\$arch
  Server = https://ftp.myrveln.se/pub/linux/archlinux/\$repo/os/\$arch
  Server = https://mirror.osbeck.com/archlinux/\$repo/os/\$arch

  ## Switzerland
  Server = http://pkg.adfinis-sygroup.ch/archlinux/\$repo/os/\$arch
  Server = https://pkg.adfinis-sygroup.ch/archlinux/\$repo/os/\$arch
  Server = http://mirror.puzzle.ch/archlinux/\$repo/os/\$arch
  Server = https://mirror.puzzle.ch/archlinux/\$repo/os/\$arch
  Server = https://mirror.ungleich.ch/mirror/packages/archlinux/\$repo/os/\$arch

  ## Taiwan
  Server = http://archlinux.cs.nctu.edu.tw/\$repo/os/\$arch
  Server = http://shadow.ind.ntou.edu.tw/archlinux/\$repo/os/\$arch
  Server = http://ftp.tku.edu.tw/Linux/ArchLinux/\$repo/os/\$arch
  Server = http://ftp.yzu.edu.tw/Linux/archlinux/\$repo/os/\$arch

  ## Thailand
  Server = http://mirror.kku.ac.th/archlinux/\$repo/os/\$arch
  Server = https://mirror.kku.ac.th/archlinux/\$repo/os/\$arch
  Server = http://mirror2.totbb.net/archlinux/\$repo/os/\$arch

  ## Turkey
  Server = http://ftp.linux.org.tr/archlinux/\$repo/os/\$arch
  Server = http://mirror.veriteknik.net.tr/archlinux/\$repo/os/\$arch

  ## Ukraine
  Server = http://archlinux.ip-connect.vn.ua/\$repo/os/\$arch
  Server = https://archlinux.ip-connect.vn.ua/\$repo/os/\$arch
  Server = http://mirrors.nix.org.ua/linux/archlinux/\$repo/os/\$arch
  Server = https://mirrors.nix.org.ua/linux/archlinux/\$repo/os/\$arch

  ## United Kingdom
  Server = http://mirror.bytemark.co.uk/archlinux/\$repo/os/\$arch
  Server = https://mirror.bytemark.co.uk/archlinux/\$repo/os/\$arch
  Server = http://mirrors.manchester.m247.com/arch-linux/\$repo/os/\$arch
  Server = http://www.mirrorservice.org/sites/ftp.archlinux.org/\$repo/os/\$arch
  Server = https://www.mirrorservice.org/sites/ftp.archlinux.org/\$repo/os/\$arch
  Server = http://arch.serverspace.co.uk/arch/\$repo/os/\$arch
  Server = http://archlinux.mirrors.uk2.net/\$repo/os/\$arch
  Server = http://mirrors.ukfast.co.uk/sites/archlinux.org/\$repo/os/\$arch
  Server = https://mirrors.ukfast.co.uk/sites/archlinux.org/\$repo/os/\$arch

  ## United States
  Server = http://mirrors.acm.wpi.edu/archlinux/\$repo/os/\$arch
  Server = http://mirrors.advancedhosters.com/archlinux/\$repo/os/\$arch
  Server = http://mirrors.aggregate.org/archlinux/\$repo/os/\$arch
  Server = http://ca.us.mirror.archlinux-br.org/\$repo/os/\$arch
  Server = http://il.us.mirror.archlinux-br.org/\$repo/os/\$arch
  Server = http://archlinux.surlyjake.com/archlinux/\$repo/os/\$arch
  Server = https://archlinux.surlyjake.com/archlinux/\$repo/os/\$arch
  Server = http://arlm.tyzoid.com/\$repo/os/\$arch
  Server = https://arlm.tyzoid.com/\$repo/os/\$arch
  Server = http://mirror.as65535.net/archlinux/\$repo/os/\$arch
  Server = http://mirrors.cat.pdx.edu/archlinux/\$repo/os/\$arch
  Server = http://arch.mirror.constant.com/\$repo/os/\$arch
  Server = https://arch.mirror.constant.com/\$repo/os/\$arch
  Server = http://mirror.cs.pitt.edu/archlinux/\$repo/os/\$arch
  Server = http://mirror.cs.vt.edu/pub/ArchLinux/\$repo/os/\$arch
  Server = http://distro.ibiblio.org/archlinux/\$repo/os/\$arch
  Server = http://mirror.es.its.nyu.edu/archlinux/\$repo/os/\$arch
  Server = http://mirrors.gigenet.com/archlinux/\$repo/os/\$arch
  Server = http://mirror.grig.io/archlinux/\$repo/os/\$arch
  Server = https://mirror.grig.io/archlinux/\$repo/os/\$arch
  Server = http://www.gtlib.gatech.edu/pub/archlinux/\$repo/os/\$arch
  Server = http://mirror.dc02.hackingand.coffee/arch/\$repo/os/\$arch
  Server = http://mirror.hackingand.coffee/arch/\$repo/os/\$arch
  Server = https://mirror.dc02.hackingand.coffee/arch/\$repo/os/\$arch
  Server = https://mirror.hackingand.coffee/arch/\$repo/os/\$arch
  Server = http://repo.ialab.dsu.edu/archlinux/\$repo/os/\$arch
  Server = http://mirrors.kernel.org/archlinux/\$repo/os/\$arch
  Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch
  Server = http://mirror.dal10.us.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = http://mirror.sfo12.us.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = http://mirror.wdc1.us.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = https://mirror.dal10.us.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = https://mirror.sfo12.us.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = https://mirror.wdc1.us.leaseweb.net/archlinux/\$repo/os/\$arch
  Server = http://mirrors.liquidweb.com/archlinux/\$repo/os/\$arch
  Server = http://mirror.lty.me/archlinux/\$repo/os/\$arch
  Server = https://mirror.lty.me/archlinux/\$repo/os/\$arch
  Server = http://mirrors.lug.mtu.edu/archlinux/\$repo/os/\$arch
  Server = https://mirrors.lug.mtu.edu/archlinux/\$repo/os/\$arch
  Server = http://mirror.math.princeton.edu/pub/archlinux/\$repo/os/\$arch
  Server = http://mirror.metrocast.net/archlinux/\$repo/os/\$arch
  Server = http://mirror.kaminski.io/archlinux/\$repo/os/\$arch
  Server = https://mirror.kaminski.io/archlinux/\$repo/os/\$arch
  Server = http://repo.miserver.it.umich.edu/archlinux/\$repo/os/\$arch
  Server = http://mirrors.ocf.berkeley.edu/archlinux/\$repo/os/\$arch
  Server = https://mirrors.ocf.berkeley.edu/archlinux/\$repo/os/\$arch
  Server = http://ftp.osuosl.org/pub/archlinux/\$repo/os/\$arch
  Server = http://arch.mirrors.pair.com/\$repo/os/\$arch
  Server = http://mirrors.rit.edu/archlinux/\$repo/os/\$arch
  Server = https://mirrors.rit.edu/archlinux/\$repo/os/\$arch
  Server = http://mirrors.rutgers.edu/archlinux/\$repo/os/\$arch
  Server = https://mirrors.rutgers.edu/archlinux/\$repo/os/\$arch
  Server = http://mirror.siena.edu/archlinux/\$repo/os/\$arch
  Server = http://mirrors.sonic.net/archlinux/\$repo/os/\$arch
  Server = https://mirrors.sonic.net/archlinux/\$repo/os/\$arch
  Server = http://mirrors.sorengard.com/archlinux/\$repo/os/\$arch
  Server = https://mirrors.sorengard.com/archlinux/\$repo/os/\$arch
  Server = http://arch.mirror.square-r00t.net/\$repo/os/\$arch
  Server = https://arch.mirror.square-r00t.net/\$repo/os/\$arch
  Server = http://mirror.stephen304.com/archlinux/\$repo/os/\$arch
  Server = https://mirror.stephen304.com/archlinux/\$repo/os/\$arch
  Server = http://mirror.umd.edu/archlinux/\$repo/os/\$arch
  Server = http://mirror.vtti.vt.edu/archlinux/\$repo/os/\$arch
  Server = http://mirrors.xmission.com/archlinux/\$repo/os/\$arch
  Server = http://mirrors.xtom.com/archlinux/\$repo/os/\$arch
  Server = https://mirrors.xtom.com/archlinux/\$repo/os/\$arch
  ## Vietnam
  Server = http://f.archlinuxvn.org/archlinux/\$repo/os/\$arch
EOF

fi

# When doing a huge EOF do not forget that each EOF token do not insert and indentation or it will read as invalid
# Reference https://stackoverflow.com/questions/18660798/here-document-gives-unexpected-end-of-file-error





echo "${pbadge} 🧳 Doing some initial Setup"
echo "Cleaning Lists"
sed -i "s/^[[:space:]]*\(CheckSpace\)/# \1/" "${folder}/etc/pacman.conf"
export installmode=1 #this flag is to disable env before updating the glibc
threadGPG=$(bash ${bin} "pacman-key --init" > ${logs}/gpgInit 2>&1 ) &
echo "Waiting for 15 seconds"
sleep 15
kill -9 ${threadPID}
echo disable-scdaemon > ${folder}/etc/pacman.d/gnupg/gpg-agent.conf #https://github.com/sdrausty/TermuxArch/issues/33
echo "${pbadge} Initiating GPG key signing phase 1"
threadGPG=$(bash ${bin} "pacman-key --populate archlinux${specialarchtype}" > ${logs}/gpgInit 2>&1 ) &
threadPID=$!
echo "Waiting for 10 seconds"
sleep 10
kill -9 ${threadPID}
echo "${pbadge} Initiating GPG key signing phase 2"
threadGPG=$(bash ${bin} "pacman-key --populate archlinux${specialarchtype}" > ${logs}/gpgInit 2>&1 ) &
threadPID=$!
echo "Waiting for 60 seconds"
sleep 60
kill -9 ${threadPID}

# Update the pacman libraries first
# THe depenendices are available in here https://bbs.archlinux.org/viewtopic.php?id=117679
bash ${bin} "rm -rf /var/lib/pacman/db.lck"
echo "${pbadge} Forcefully Refreshing repo"
bash ${bin} "pacman -Syy --noconfirm"
bash ${bin} "pacman -Syy libidn2 libpsl gnutls systemd curl gpgme gnupg --noconfirm"
bash ${bin} "pacman -Syyu busybox awk which screenfetch perl fish --noconfirm"
#bash ${bin} "rm -rf /tmp/*;apt-get clean ; mv /var/lib/apt/lists /tmp; mkdir -p /var/lib/apt/lists/partial; apt-get clean;chown -R root:root /var/lib/apt/lists/partial"
#bash ${bin} "apt-get update --allow-insecure-repositories"
#bash ${bin} "apt-get update --allow-insecure-repositories --allow-unauthenticated"
#bash ${bin} "apt-get -o Debug::Acquire::gpgv=1 install --allow-unauthenticated gnupg -y"
#echo "Recovering Keys"
#bash ${bin} "apt-key adv -v --keyserver keyserver.bootstrap.com --recv-keys"
#bash ${bin} "apt-get -o Debug::Acquire::gpgv=1 install --allow-unauthenticated dialog gnupg busybox screenfetch perl fish -y"
if [ -f ${maindir}/NOPTRACE ]; then
bash ${bin} "pacman-key --populate archlinux${specialarchtype}" # fixing at least one signature invalidation prolem
# the reason is still unknown why chroot butchered the permission or make the gpg inavlid
fi
#bash ${bin} "busybox install /usr/bin"
echo "${pbadge} 🧳 Fixing Perl"
#bash ${bin} "rm -f /usr/bin/perl"
#bash ${bin} "cp /usr/bin/perl5* /usr/bin/perl"
bash ${bin} "bash /verifier"
#replacing symlinks perl into real perl
echo "fixing shebang of $bin"
if [ ${packmanager} == "pkg" ]; then
termux-fix-shebang $bin
fi
echo "${pbadge} Checking whether the installation is successful"
if [ -f ${folder}/installationSuccessfull ]; then
green
echo "${pbadge} 😄Yippie yay your installation is successfull😄"
echo a > success
echo "${pbadge} Trimming installation"
rm -rf ${folder}/usr/lib/firmware/*
else
  red
echo "============================================================================="
echo "${pbadge} 🥺THE CONTAINER FAILED DURING INSTALL AND VERIFICATION🥺"
echo "============================================================================"
if [ ${DEVELMODE} == "1" ] && [ ! -z ${DEVELMODE} ]; then
  # IF YOU RUN ON SUDO PLEASE MAKE SURE TO USE $ sudo env DEVELMODE=1 ./unifyServer
echo "${pbadge} Dropping into shell mode"
bash ${bin} sh
fi
yellow
defaultContainerSetup
fi

echo "${pbadge} 🧳 making $bin executable"
chmod +x $bin
}

#This is basically the same as creating one container ahead of the request so later on it can be simply renamed it giving it a instant access
# I recommend to run this service in the background to give it the sense of super fast but rather a clever optimization
#containerAheadOptimizationCache > ${logs}/containerAheadOptimizationCache.log 2>&1 &
##echo $! > ${maindir}/containerOptimizationPID
containerAheadOptimizationCache(){
  echo "[debug] Checking TMP FOLDER"
if [ -f ${unasignedContainer}/runningCacheOP ]; then
exit
fi
  echo 1 > ${unasignedContainer}/runningCacheOP
if [ ! -d ${unasignedContainer} ] || [ ! -f ${unasignedContainer}/cacheSuccess ] || [ ! -d ${unasignedContainer}/rootfs ]; then
${userspacebackend} ${symlinkfix} rm -rfv ${unasignedContainer}
mkdir ${unasignedContainer}
${userspacebackend} ${symlinkfix} tar -C "${unasignedContainer}" -xf "${containersLair}/defaultSeq" >> ${logs}/UNASIGNEDrootfsOptimizedCopyOperation.log 2>&1
echo 1 > ${unasignedContainerTMP}/cacheSuccess
fi
rm ${unasignedContainer}/runningCacheOP
}


sequentialOptimizationCache(){
#This is the samething as defrag
# This optimization will increase the speed not only on HDD but on lower core counts computer and single threaded cp commands
cd ${origindir}
if [ ! -f ${containersLair}/defaultSeq ] || [ ! -f ${containersLair}/guranteedSeqIntegrity ]; then
cd ${defaultContainer}
echo "${pbadge} 🧳 Optimizing System "
tar cvzf ${containersLair}/defaultSeq . >> ${logs}/rootfsOptimization.log 2>&1
echo 1 > ${containersLair}/guranteedSeqIntegrity # flag for integrity if it finishes compressing
echo "${pbadge} 🧳 Optimizing System Done "
else
echo "${pbadge} 🧳 System has been optimized"
fi
containerAheadOptimizationCache   > ${logs}/containerAheadOptimizationCache.log 2>&1 &
#echo $! > ${maindir}/containerOptimizationPID
cd ${origindir}
}


notifyBusIOd(){
  svcstart_notifyBusIOThread(){
red
echo "${pbadge} Function is not implemented"
echo "[debug] notifyBusIOd() function is a stub code"
}
svcstart_notifyBusIOThread &
export svcPID_notifyBusIOThread=$!
}

defaultContainerSetup(){
if [ ${newInstall} == "0" ] && [ -f ${defaultContainer}/success ]; then
echo 1 > ${defaultContainer}/success
fi
if [ ${newInstall} == "1" ]; then
if [ -d ${defaultContainer} ]; then
cd ${defaultContainer}
bootstrapSetup
else
  red
echo "${pbadge} FATAL ERROR wowza What happened to the default container folder??"
echo "${pbadge} Try to relaunch the manager it might be fixed in the next boot"
exit
fi
else
  red
if [ -f ${defaultContainer}/success ]; then
green
APIcall systemUI_notifysend "✔️_defaultContainer_integrity_check_success"
echo "${pbadge} default container is installed"
rm -rf ${defaultContainer}/bootstrap.tar.gz
else
red
APIcall systemUI_notifysend "❌_defaultContainer_failure"
echo "${pbadge} resetting Install due to the corrupted install"
export newInstall=1
# This will forces the program to retry until the program output the flag ( success flag ) from the verifier test ( See bootstrapSetup verifier test )
cd ${origindir}
${userspacebackend} ${symlinkfix} rm -rf ${containersLair}/defaultSeq
${userspacebackend} ${symlinkfix} rm -rf ${unasignedContainer}
${userspacebackend} ${symlinkfix} rm -rf ${defaultContainer}
folderInit
defaultContainerSetup
fi
fi
}


unifyServerD_vm(){
echo "${pbadge} Function is not implemented"
echo "[DEBUG]: unifyServer vm daemon"
}


cacheExpireCheck(){
if [ ! -f ${containersLair}/expireCount ]; then
  echo "${pbadge} Cache is invalid deleting cache"
  APIcall systemUI_notifysend "Cache_is_invalid_refreshing_Cache"
  ${userspacebackend} ${symlinkfix} rm -rf ${containersLair}/defaultSeq
  ${userspacebackend} ${symlinkfix} rm -rf ${unasignedContainer}
  echo 0 > ${containersLair}/expireCount
else
expireCount=$(cat ${containersLair}/expireCount)
expireCount=$((expireCount + 1))
echo "${expireCount}" > ${containersLair}/expireCount
if [ ${expireCount} -gt "16" ]; then
rm -rf ${containersLair}/expireCount
fi
fi
}



fetchUpdateManager(){
# IF YOU RUN ON SUDO PLEASE MAKE SURE TO USE $ sudo env DEVELMODE=1 ./unifyServer
if [ -z ${DEVELMODE} ]; then
cd ${origindir}
git reset --hard
git pull
echo ${origindir}/${0}
chmod +x ${0}
fi
}

#Cache data into ram using variables
cachemem(){
red
prefetchmem(){
count=0
for a in $(ls ${TMPFolder}/prefetch); do
count=count+1
export address_${count}=$(cat ${a})
export storedmem="${storedmem} address_${count}"
done
}

flushmem(){
  for a in ${storedmem}; do
    echo "${a}" > ${TMPFolder}/prefetch/$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
  done
}



red
echo "${pbadge} Warning this is a experimental feature use with caution"

store(){
echo "${pbadge} [debug] ${storedmem} address_${1} "

export address_${1}="$(busybox tar -cf - "${2}" | base64)"
export storedmem="${storedmem} address_${2}"
}

release(){
if [ address_${1} != "null" ] || [ ! -z address_${1} ] ; then
echo "test"
fi
}

eraseAddress(){
export address_${2}="null"
}

cachememd(){
echo "${pbadge} function is not implemented"
}

${1} ${2} ${3}
}


makeObfuscation(){
if [ ${DEVELMODE} == "1" ] && [ ! -z ${DEVELMODE} ]; then
convertedcode=$(base64 ${0})


output="bay_mana"
cat > "${output}" <<- EOM
#!/bin/bash
capsule=$( echo "${convertedcode}" \| base64 \--decode)
bash - \${1} \${2} \${3} \${4} < \${capsule}
EOM



else
red
echo "Wait thats illegal access"
exit
fi

}








APIcall(){
  dummyResponse(){
  echo "${pbadge} Current version of API Abstraction Layer is unsupported for your current environment"
  }
  #This function is basically like a API abstraction layer
  #red
  #echo "${pbadge} Function is not implemented"
  #echo '[DEBUG] APIcall() function only supported for termux '
  #yellow
  #echo "${pbadge} Detecting available API"
  #echo '[WARN] Wakelock, Notification, Humain interface input, Sensors may not work on current version'#

  #____________________________
  #Hardware Acceleration Setup
  #OpenCL
  opencl_forward(){
    echo "${pbadge} Function is not yet implemented"
  }
  #__________________________
  if [ ${distro} == "termux" ]; then
    #systemUI calls
    #echo "Using Termux API"
    systemUI_notifysend(){ termux-notification "${1}" "${2}" "${3}" "${4}" ;}
    systemUI_directNotification(){ termux-toast "${1}" "${2}" "${3}" "${4}" ;}
    systemUI_nativeDownload(){ termux-download "${1}" "${2}" "${3}" "${4}" ;}
    systemUI_clipboard_get(){ termux-clipboard-get; }
    systemUI_clipboard_set(){ termux-clipboard-set; }
    systemUI_authFingerprint(){ termux-fingerprint; }
    #Power management calls
    pwmCall_batterystat(){ termux-battery-status; }
    pwmCall_enable_wakelockcall(){ termux-wake-lock; }
    pwmCall_disable_wakelockcall(){ termux-wake-unlock; }
    pwmCall_brightnessAdjust(){ termux-brightness; }
    #Sensors call
    sense_Retrievesensor(){ termux-sensor; }
    #radiocall
    tele_sms_read(){ termux-sms-list; }
    tele_sms_send(){ termux-sms-send; }
    tele_voice_call(){ termux-telephony-call ${1} ${2} ${3} ;}
    #hardware access
    hw_usb(){ termux-usb ${1} ${2} ${3} ;}
  fi
  if [ ${distro} == "debianGNU" ] || [ ${distro} == "iSH" ] || [ ${distro} == "debian" ] || [ ${distro} == "archlinux" ]; then
    #systemUI calls
    #echo "Using Generic GNU/Linux calls"
    systemUI_notifysend(){ echo [INFO] ${pbadge}; }
    if [ ! -z $(which xmessage) ]; then
    systemUI_directNotification(){ xmessage; }
  else
    systemUI_directNotification(){ echo [INFO] ${pbadge}; }
  fi
  if [ ${WSLenv} == "1" ] && [ ! -z ${WSLenv} ]; then
    #echo "Using WSL specific calls"
  systemUI_directNotification(){ powershell.exe New-BurntToastNotification -Text "${1}" "${2}" "${3}" "${4}" ; }
  systemUI_notifysend(){ powershell.exe New-BurntToastNotification -Text "${1}" "${2}" "${3}" "${4}"; }
fi
    alias systemUI_sensorpoll="dummyResponse"
    if [ ! -z $(which aria2c) ]; then
    systemUI_nativeDownload(){ aria2c; }
  else
    systemUI_nativeDownload(){ wget; }
  fi
    if [ ! -z $(which xclip) ]; then
    systemUI_clipboard_get(){ xclip; }
    systemUI_clipboard_set(){ xclip -selection c; }
  else
    alias systemUI_clipboard_get="dummyResponse"
    alias systemUI_clipboard_set="dummyResponse"
  fi
    alias systemUI_authFingerprint="dummyResponse"
    #Power management calls
    if [ ! -d /proc/acpi ]; then
    alias pwmCall_batterystat="termux-battery-status"
    alias pwmCall_enable_wakelockcall="termux-wake-lock"
    alias pwmCall_disable_wakelockcall="termux-wake-unlock"
    alias pwmCall_brightnessAdjust="termux-brightness"
  else
    alias pwmCall_batterystat="dummyResponse"
    alias pwmCall_enable_wakelockcall="dummyResponse"
    alias pwmCall_disable_wakelockcall="dummyResponse"
    alias pwmCall_brightnessAdjust="dummyResponse"
  fi
    #Sensors call
    export sense_Retrievesensor="dummyResponse"
    #radiocall
    alias tele_sms_read="dummyResponse"
    alias tele_sms_send="dummyResponse"
    alias tele_voice_call="dummyResponse"
    #hardware access
    hw_usb(){ lsusb ; }
  fi
  # use distroDetection to determine its API usage
  # API that is need to be implemented are but not limited
  # Wakelock, Notification, Humain interface input, Sensors

#125
#https://unix.stackexchange.com/questions/1496/why-doesnt-my-bash-script-recognize-aliases
#First of all, as ddeimeke said, aliases by default are not expanded in non-interactive shells.
#Second, .bashrc is not read by non-interactive shells unless you set the BASH_ENV environment variable.
#But most importantly: don't do that! Please? One day you will move that script somewhere where the necessary aliases are not set and it will break again.
#Instead set and use environment variables as shortcuts in your script:
  "${1}" "${2}" "${3}" "${4}" &
}


symlinksFix(){
if [ ${linktosymlinkActivated} == '1' ]; then
  export symlinkfix='--link2symlink'
else
  export symlinkfix=''
fi
}

#_________Main_________
#only if it is used for nonmodular purposes
intro
blue
echo "${pbadge} 📁 [1/8] Checking Folders"
folderInit
intro
blue
echo "${pbadge} 🚒 [2/8] Checking dependencies"
dependencies
APIcall
blue
echo "${pbadge} 🌳 [3/8] Checking ptrace compatibility"
ptraceCompatibilityPolice
blue
echo "${pbadge} 💽 [4/8] Checking symlinks compatibility"
symlinksFix
echo "${pbadge} 💽 [5/8] Updating Manager"
fetchUpdateManager
blue
echo "${pbadge} 💽 [6/8] Checking Default Container"
defaultContainerSetup
blue
echo "${pbadge} 💽 [7/8] Cache validation Check"
cacheExpireCheck
blue
echo "${pbadge} 💽 [8/8] Caching Sequential rootfs"
sequentialOptimizationCache
paramCheck
paramintrepreter
exit
#______END______
